openapi: 3.0.3
info:
  description: stack_lite_Java API
  title: stack_lite_Java API
  version: 1.0.0
servers:
- url: https://stack_lite_Java
paths:
  /api/v1/auth/login:
    post:
      operationId: authenticateEmailPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAuthDto'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Object'
          description: OK
      summary: POST api/v1/auth/login
      x-contentType: application/json
      x-accepts: '*/*'
  /api/v1/auth/register:
    post:
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationDto'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Object'
          description: OK
      summary: POST api/v1/auth/register
      x-contentType: application/json
      x-accepts: '*/*'
  /api/v1/users/allusers:
    get:
      operationId: getAllUsers
      parameters:
      - explode: true
        in: query
        name: queryParameters
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Object'
          description: OK
      summary: GET api/v1/users/allusers
      x-accepts: '*/*'
  /api/v1/users/search:
    get:
      operationId: searchUsers
      parameters:
      - explode: true
        in: query
        name: queryParameters
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Object'
          description: OK
      summary: GET api/v1/users/search
      x-accepts: '*/*'
  /api/v1/users/{Id}/profile:
    get:
      operationId: getUser
      parameters:
      - explode: false
        in: path
        name: Id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserRespDto'
          description: OK
      summary: GET api/v1/users/{Id}/profile
      x-accepts: '*/*'
  /api/v1/users/{Id}/profile/edit:
    put:
      operationId: updateUser
      parameters:
      - explode: false
        in: path
        name: Id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileUpdateDto'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
          description: OK
      summary: PUT api/v1/users/{Id}/profile/edit
      x-contentType: application/json
      x-accepts: '*/*'
  /api/v1/movies/all:
    get:
      operationId: getAllMovies
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/Movie'
                type: array
          description: OK
      summary: GET api/v1/movies/all
      x-accepts: '*/*'
  /api/v1/movies/{imdbId}:
    get:
      operationId: getMovie
      parameters:
      - explode: false
        in: path
        name: imdbId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Movie'
          description: OK
      summary: GET api/v1/movies/{imdbId}
      x-accepts: '*/*'
  /api/v1/reviews/create:
    post:
      operationId: createReview
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Review'
          description: OK
      summary: POST api/v1/reviews/create
      x-contentType: application/json
      x-accepts: '*/*'
  /api/v1/reviews/review:
    get:
      operationId: getAllReviews
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/Review'
                type: array
          description: OK
      summary: GET api/v1/reviews/review
      x-accepts: '*/*'
components:
  schemas:
    UserAuthDto:
      example:
        password: password
        email: email
      properties:
        email:
          type: string
        password:
          type: string
      type: object
    Object:
      properties: {}
      type: object
    UserRegistrationDto:
      example:
        firstName: firstName
        lastName: lastName
        password: password
        phoneNumber: 0
        role:
        - role
        - role
        email: email
        username: username
      properties:
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        phoneNumber:
          format: int64
          type: integer
        email:
          type: string
        password:
          type: string
        role:
          items:
            type: string
          type: array
      type: object
    UserRespDto:
      example:
        lastName: lastName
        stack: stack
        isVerified: true
        profileImage: profileImage
        uuid: uuid
        authorities:
        - authorities
        - authorities
        firstName: firstName
        phoneNumber: 6
        nationality: nationality
        meta: meta
        id: 0
        email: email
        age: age
        username: username
      properties:
        id:
          format: int32
          type: integer
        uuid:
          type: string
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        phoneNumber:
          format: int64
          type: integer
        email:
          type: string
        isVerified:
          type: boolean
        stack:
          type: string
        profileImage:
          type: string
        meta:
          type: string
        age:
          type: string
        nationality:
          type: string
        authorities:
          items:
            type: string
          type: array
      type: object
    UserProfileUpdateDto:
      example:
        firstName: firstName
        lastName: lastName
        phoneNumber: 0
        nationality: nationality
        meta: meta
        profileImage: profileImage
        email: email
        age: age
      properties:
        firstName:
          type: string
        lastName:
          type: string
        phoneNumber:
          format: int64
          type: integer
        email:
          type: string
        profileImage:
          type: string
        meta:
          type: string
        age:
          type: string
        nationality:
          type: string
      type: object
    Date:
      example: {}
      properties: {}
      type: object
    Role:
      example:
        roleId: 5
        name: ROLE_USER
        id: 1
      properties:
        id:
          format: int64
          type: integer
        roleId:
          format: int32
          type: integer
        name:
          enum:
          - ROLE_USER
          - ROLE_MANAGER
          - ROLE_ADMIN
          type: string
      type: object
    User:
      example:
        lastName: lastName
        stack: stack
        isVerified: true
        profileImage: profileImage
        passwordResetToken: passwordResetToken
        uuid: uuid
        authorities:
        - roleId: 5
          name: ROLE_USER
          id: 1
        - roleId: 5
          name: ROLE_USER
          id: 1
        firstName: firstName
        createdAt: {}
        password: password
        phoneNumber: 6
        nationality: nationality
        meta: meta
        id: 0
        email: email
        age: age
        username: username
        updatedAt: {}
      properties:
        id:
          format: int32
          type: integer
        uuid:
          type: string
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        phoneNumber:
          format: int64
          type: integer
        email:
          type: string
        password:
          type: string
        passwordResetToken:
          type: string
        isVerified:
          type: boolean
        stack:
          type: string
        profileImage:
          type: string
        meta:
          type: string
        age:
          type: string
        nationality:
          type: string
        createdAt:
          $ref: '#/components/schemas/Date'
        updatedAt:
          $ref: '#/components/schemas/Date'
        authorities:
          items:
            $ref: '#/components/schemas/Role'
          type: array
      type: object
    ObjectId:
      example:
        timestamp: 0
      properties:
        timestamp:
          format: int32
          type: integer
      type: object
    Review:
      example:
        id:
          timestamp: 0
        body: body
      properties:
        id:
          $ref: '#/components/schemas/ObjectId'
        body:
          type: string
      type: object
    Movie:
      example:
        reviewIds:
        - id:
            timestamp: 0
          body: body
        - id:
            timestamp: 0
          body: body
        releaseDate: releaseDate
        imdbId: imdbId
        genres:
        - genres
        - genres
        backdrops:
        - backdrops
        - backdrops
        id:
          timestamp: 0
        title: title
        poster: poster
        trailerLink: trailerLink
      properties:
        id:
          $ref: '#/components/schemas/ObjectId'
        imdbId:
          type: string
        title:
          type: string
        releaseDate:
          type: string
        trailerLink:
          type: string
        poster:
          type: string
        genres:
          items:
            type: string
          type: array
        backdrops:
          items:
            type: string
          type: array
        reviewIds:
          items:
            $ref: '#/components/schemas/Review'
          type: array
      type: object

